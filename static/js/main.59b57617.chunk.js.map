{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","todoListUpdate","task","setState","todoList","state","concat","name","complete","id","Date","getTime","todoListClear","notCompletedList","filter","notCompleted","react_default","a","createElement","App_Body","Component","Body","todoListAdd","e","_this2","target","value","_this3","className","type","onClick","props","placeholder","onChange","App_ListofTasks","clickCheckbox","class","ListofTasks","tem","_this4","i","length","_this5","output","map","todo","App_List","List","_this6","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59b57617.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super()\n\n    this.state= {\n      todoList: [\n        {\n        name: 'munifa', \n        complete: false,\n        id: 0\n       }\n      ]\n   }\n  }\n    todoListUpdate = (task) => {\n    this.setState({\n        todoList: this.state.todoList.concat({\n            name:task,\n            complete: false,\n            id: new Date().getTime()\n        })\n    })\n    }\n    todoListClear = () => {\n      let notCompletedList = this.state.todoList.filter((notCompleted)=>{\n        return notCompleted.complete === false\n      })\n      this.setState({\n        todoList: notCompletedList\n      })\n    }\n\n    render() {\n    return (\n      <div>\n       <Body todoListUpdate={this.todoListUpdate} todoListClear={this.todoListClear}todoList={this.state.todoList}/>\n      </div>\n    );\n  }\n\n}\n\nclass Body extends Component {\n\n  state = {\n    task: \"\"\n  }\n\n  todoListAdd = (e) => {\n    this.setState({\n      task:e.target.value\n    })\n  }\n\n  \n\nrender() {\n  return (\n     <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">To Dos</h1>\n        <form>\n            <div className=\"input-group\">\n                <span className=\"input-group-btn\">\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={()=>this.props.todoListUpdate(this.state.task)} >Add</button>\n                </span>\n                <input className=\"form-control\" placeholder=\"add a todo\" name = 'task' onChange={this.todoListAdd}/>\n             </div>\n        </form>\n        <ul className=\"list-group\">\n        <ListofTasks todoList={this.props.todoList} clickCheckbox={this.clickCheckbox}/>\n        </ul>\n        <select>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"complete\">complete</option>\n        </select>\n         <button class=\"pull-right btn btn-default\" type ='button'  onClick={this.props.todoListClear}>Clear Complete</button>\n       </div>\n    </div>\n  )\n}\n}\n\nclass ListofTasks extends Component {\n\n  clickCheckbox = (id) => {\n    let tem = this.props.todoList\n    for(let i=0; i<tem.length; i++){\n      if(tem[i].id === id ){\n      tem[i].complete = !tem[i].complete\n    }\n    }\n    \n    this.setState({\n        todoList: tem\n      })\n    }\n  render(){\n    const output = this.props.todoList.map((todo, i) => {\n      return <List todo={todo}  clickCheckbox={this.clickCheckbox}/>\n    })\n    return(\n      <div>\n      {output}\n      </div>\n    )\n  }\n}\n\nclass List extends Component {\n  render(){\n    return(\n      <div>\n        <li className=\"list-group-item\">\n        <input type=\"checkbox\"  onChange= {()=>this.props.clickCheckbox(this.props.todo.id)} value={this.props.todo.complete}/>\n        <label className={this.props.todo.complete ? 'done': ''} >{this.props.todo.name}</label>\n        </li>\n      </div>\n\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}